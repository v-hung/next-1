// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Admin {
  id       String @id @default(cuid())
  email    String @unique
  password String
  name     String

  imageId String?
  image   Image?  @relation("avatar",fields: [imageId], references: [id])

  images Image[] @relation("images")

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  publish   String   @default("publish") // or draft
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id   String @id @default(cuid())
  name String

  admins Admin[]

  permissions PermissionsOnRoles[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  key       String // 'browse' | 'create' | 'edit' | 'delete' | 'image' 
  tableName String

  roles PermissionsOnRoles[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // id        String @id @default(cuid())
  @@id([key, tableName])
}

model PermissionsOnRoles {
  roleId              String
  permissionKey       String
  permissionTableName String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission Permission @relation(fields: [permissionKey, permissionTableName], references: [key, tableName], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([roleId, permissionKey, permissionTableName])
}

model FolderImage {
  id   String @id @default(cuid())
  name String

  parentId String?
  parent   FolderImage?  @relation("children", fields: [parentId], references: [id])
  children FolderImage[] @relation("children")

  images Image[]
}

model Image {
  id            String  @id @default(cuid())
  name          String
  type          String
  caption       String?
  url           String
  width         Int?
  height        Int?
  naturalHeight Int
  naturalWidth  Int
  size          Float
  tableName     String

  adminId String
  admin   Admin  @relation("images", fields: [adminId], references: [id])

  folderImageId String?
  folderImage   FolderImage? @relation(fields: [folderImageId], references: [id])

  categories Category[]
  products   Product[]
  admins     Admin[] @relation("avatar")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupSetting {
  id        String @id @default(uuid())
  name      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  settings Setting[]
}

model Setting {
  id String @id @default(uuid())
  name    String @unique
  field   String
  details String?
  value String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupId String
  group   GroupSetting  @relation(fields: [groupId], references: [id])
}

model Category {
  id    String @id @default(cuid())
  title String
  sold  Int?   @default(0)
  type  String

  products Product[]

  imageId String?
  image   Image?  @relation(fields: [imageId], references: [id])

  publish   String   @default("publish") // or draft
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id               Int    @id @default(autoincrement())
  name             String
  price            Int
  promotionalPrice Int?
  heros            Int
  skins            Int
  rank             String
  gem              Int

  images Image[]

  publish    String   @default("publish") // or draft
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
